RAKE = ENV['RAKE'] ? ENV['RAKE'] : 'rake'
# Single package rakefile script.

class SharedVars
  attr_accessor :parent, :proj, :version
  
  def initialize
    @parent, @proj, @version = 'new_parent', 'new_parent-new_pkg', '0.0.0'
  end
end

VARS = SharedVars.new
VARS.parent, pkg = '{{parent}}{{^parent}}intro_c{{/parent}}', '{{project}}{{^project}}util{{/project}}'
VARS.proj, VARS.version = "#{VARS.parent}-#{pkg}", '{{version}}{{^version}}0.1.0{{/version}}'
namespace_path = VARS.parent.gsub(/\./, '/')

desc "Default target: #{RAKE} help"
task :default => [:help]

PKG_CONFIG = "pkg-config --with-path=#{PREFIX}/lib/pkgconfig"

link_libs = 'libpcre glib-2.0{{#executable}} log4c yaml-0.1 yajl json-c{{/executable}}'
VARS.cppflags = "#{ENV['CPPFLAGS']} -Iinclude -I../src `#{PKG_CONFIG} --cflags-only-I #{link_libs}`"
VARS.ldflags = "#{ENV['LDFLAGS']} -Wl,-rpath,'$ORIGIN/' -Llib `#{PKG_CONFIG} --libs-only-L #{link_libs}`"
VARS.cflags = "#{ENV['CFLAGS']} -Wall -pedantic -std=c99 -m64 `#{PKG_CONFIG} --cflags-only-other #{link_libs}`"
VARS.asflags = "#{ENV['ASFLAGS']} -Iinclude -I../src `#{PKG_CONFIG} --cflags-only-I #{link_libs}`"
VARS.arflags = 'rvcs'
VARS.ldlibs = "`#{PKG_CONFIG} --libs-only-other --libs-only-l #{link_libs}`" # -lm # -l:libm.a

src_c = FileList["../src/**/*.c"]
#src_c = FileList["*.s", "../src/**/*.c"]

VARS.cflags += " `#{PKG_CONFIG} --cflags {{testfrwk}}{{^testfrwk}}check{{/testfrwk}}`"
ldlibs_test = "`#{PKG_CONFIG} --libs {{testfrwk}}{{^testfrwk}}check{{/testfrwk}}`{{#executable}}" #{{/executable}} -l#{VARS.proj}"
#tests_c = FileList[Dir.glob(File.join("../tests", "**", "*.c"))]
tests_c = FileList["../tests/**/*.c"]

file '.depend' => src_c + tests_c do |t|
  "bin lib/pkgconfig share/doc/#{VARS.proj}".split().each { |i|
    mkdir_p(i) || true }
  cd('..') { dirs_found = `find src tests -type d`
    dirs_found.split("\n").each { |i| mkdir_p('build/' + i) || true } }
  cp_r(['../include', '../resources'], '.') || true
  {{^executable}}
  rm_rf("lib/pkgconfig/#{VARS.proj}.pc") || true
  File.readlines("../src/#{VARS.proj}.pc.in").map { |o| 
    File.open("lib/pkgconfig/#{VARS.proj}.pc", 'a') { |f|
      f.write o.gsub(/@prefix@/, "#{PREFIX}") } }
  {{/executable}}
  rm_rf(t.name) || true ; touch(t.name) || true
  sh "#{CC} #{VARS.cppflags} -MM #{t.prerequisites.join(' ')} >> #{t.name}"
end

{{#executable}}
#file "lib/lib#{VARS.proj}.a" => src_c.ext('.o').map { |o| 
#  o.sub(/\.\.\/+/, '') }
#file "lib/lib#{VARS.proj}.#{SHLIBEXT}" => src_c
file "bin/#{VARS.proj}" => src_c do |t|
  sh "#{LINK_c.call(VARS, t)} #{VARS.ldlibs} -o #{t.name} || true"
end
{{/executable}}
{{^executable}}
file "lib/lib#{VARS.proj}.a" => src_c.ext('.o').map { |o| 
  o.sub(/\.\.\/+/, '') }
file "lib/lib#{VARS.proj}.#{SHLIBEXT}" => src_c
{{/executable}}

file 'tests/ts_main' => tests_c do |t|
  sh "#{LINK_c.call(VARS, t)} #{ldlibs_test} -o #{t.name} || true"
end

desc 'Compile target(s)'
task :all => ['.depend', {{#executable}}"bin/#{VARS.proj}"{{/executable}}{{^executable}}"lib/lib#{VARS.proj}.a",
  "lib/lib#{VARS.proj}.#{SHLIBEXT}"{{/executable}}]

desc 'Compile test target'
task :testCompile => 'tests/ts_main'

{{#executable}}
DEBUGGER = 'ddd --gdb ' # lldb ; ddd --gdb; gdb
# valgrind tools: memcheck helgrind cachegrind massif lackey
VALGRIND = 'valgrind --verbose --tool=memcheck '

desc 'Run main: rake run\[arg1,arg2\]'
task :run, [:arg1] => "bin/#{VARS.proj}" do |t, args|
  sh "LD_LIBRARY_PATH=#{ENV['LD_LIBRARY_PATH']}:lib #{t.source} #{args[:arg1]} #{args.extras.join(' ')} || true"
end

desc 'Debug main: rake debug\[arg1,arg2\]'
task :debug, [:arg1] => "bin/#{VARS.proj}" do |t, args|
  sh "LD_LIBRARY_PATH=#{ENV['LD_LIBRARY_PATH']}:lib #{DEBUGGER} #{t.source} #{args[:arg1]} #{args.extras.join(' ')} || true"
end

desc 'Valgrind main: rake valgrind'
task :valgrind => "bin/#{VARS.proj}" do |t|
  sh "LD_LIBRARY_PATH=#{ENV['LD_LIBRARY_PATH']}:lib #{VALGRIND} #{t.source} || true"
end
{{/executable}}

#task :classicffi_asm_s => ["../src/#{VARS.parent}/classic_asm.c.bak",
#    "../src/#{VARS.parent}/classic_f90.f90.bak"] do |t|
#   sh "#{CC} -Iinclude -Isrc -Wall -pedantic -std=c99 -m64 -S -masm=att -fPIC -x c -o classic_asm.s ../src/#{VARS.parent}/classic_asm.c.bak || true"
#   sh "#{CC} -Iinclude -Isrc -Wall -pedantic -std=f2003 -m64 -S -masm=att -fPIC -x f95 -o classic_f90.s ../src/#{VARS.parent}/classic_f90.f90.bak || true"
#end

require "../rakefile-targets.rb"
require "../rakefile-rules-c.rb"
