#!/usr/bin/env lua

-- Single package premake.lua script.
if path.getbasename(_WORKING_DIR) ~= "build" then
	printf("Error: cd build ; premake --file=../premake.lua gmake")
	os.exit(EXIT_FAILURE)
end

if path.getdirectory(_WORKING_DIR) ~= os.getcwd() then
	builddir = path.join(_WORKING_DIR, path.getbasename(os.getcwd()))
else
	require("premake-targets")
	builddir = "build"
end

premake.gcc.cc = "clang"
premake.gcc.cxx = "clang++"

solution "{{parentcap}}{{^parentcap}}Intro_c{{/parentcap}}{{joiner}}{{^joiner}}-{{/joiner}}{{projectcap}}{{^projectcap}}Util{{/projectcap}}"
	configurations { "Release", "Debug" }
	configuration "Debug"
		defines { "DEBUG" }
		flags { "Symbols", "ExtraWarnings" }
		buildoptions { "--coverage" }
		linkoptions { "--coverage" }
	configuration "Release"
		defines { "NDEBUG" }
		flags { "Optimize" }
	location (builddir)
	targetdir (builddir)
	language "C" -- C[++] ASM C# F#
	linkoptions { string.format("-Wl,-rpath,'$$ORIGIN/':%s/lib",
        _OPTIONS["prefix"] or "/usr/local") }
	solution().parent = "{{parent}}{{^parent}}intro_c{{/parent}}"
	solution().version = "{{version}}{{^version}}0.1.0{{/version}}"
	solution().somajor, solution().sominor = string.match(solution().version, "([^.]+)\.([^.]+)")
	solution().description = "{{description}}{{^description}}Utilities sub-package for C Intro examples project.{{/description}}"
{{#executable}}--[=[{{/executable}}	
	project (solution().name:lower())
		targetdir (builddir .. "/lib")
		kind "SharedLib"
		files { "include/**.h", "src/**.c" }
		-- files { "include/**.h", builddir .. "/src/**.s", "src/**.c" }
		includedirs { "include", "src" }
		buildoptions { "`pkg-config --cflags libpcre glib-2.0`" }
		--links { "pcre", "glib-2.0" }
		linkoptions { "`pkg-config --libs libpcre glib-2.0`" }
		prebuildcommands {
			"mkdir -p bin lib/pkgconfig share/doc/" .. project().name,
			string.format("cp -fR %s/include %s/resources .",
				project().basedir, project().basedir),
			string.format("sed 's|@prefix@|%s|' %s/src/%s.pc.in " .. 
				"> lib/pkgconfig/%s.pc", _OPTIONS["prefix"] or "/usr/local", 
				project().basedir, solution().name:lower(), 
				solution().name:lower()),
			-- string.format("cc -Iinclude -Isrc -Wall -pedantic -std=c99 -S -masm=att -fPIC -x c -o {0}/src/{2}/classic_asm.s {1}/src/{2}/classic_asm.c.bak", builddir, project().basedir, solution().parent),
			-- string.format("cc -Iinclude -Isrc -Wall -pedantic -std=f2003 -S -masm=att -fPIC -x f95 -o {0}/src/{2}/classic_f90.s {1}/src/{2}/classic_f90.f90.bak", builddir, project().basedir, solution().parent)
			}
		configuration "macosx"
			linkoptions { string.format("-Wl,-install_name,@rpath/lib%s.%s.dylib,-current_version,%s,-compatibility_version,%s.%s.0", 
				project().name, solution().somajor, solution().version,
				solution().somajor, solution().sominor) }
			postbuildcommands {
				string.format("cd lib ; mv -f lib%s.dylib lib%s.%s.dylib", 
					project().name, project().name, solution().version),
				string.format("cd lib ; ln -sf lib%s.%s.dylib lib%s.%s.dylib", 
					project().name, solution().version, project().name, 
					solution().somajor),
				string.format("cd lib ; ln -sf lib%s.%s.dylib lib%s.dylib", 
					project().name, solution().somajor, project().name)
			}
		configuration "linux or bsd"
			linkoptions { string.format("-Wl,-soname,lib%s.so.%s", 
				project().name, solution().somajor) }
			postbuildcommands {
				string.format("cd lib ; mv -f lib%s.so lib%s.so.%s", 
					project().name, project().name, solution().version),
				string.format("cd lib ; ln -sf lib%s.so.%s lib%s.so.%s", 
					project().name, solution().version, project().name, 
					solution().somajor),
				string.format("cd lib ; ln -sf lib%s.so.%s lib%s.so", 
					project().name, solution().somajor, project().name)
			}

	project (string.format("%s_stat", solution().name:lower()))
		targetdir (builddir .. "/lib")
		targetname (solution().name:lower())
		kind "StaticLib"
		files { "include/**.h", builddir .. "/*.s", "src/**.c" }
		includedirs { "include", "src" }
		buildoptions { "`pkg-config --cflags libpcre glib-2.0`" }
		linkoptions { "`pkg-config --libs libpcre glib-2.0`" }
{{#executable}}]=]{{/executable}}
{{#executable}}
	project (solution().name:lower())
		targetdir (builddir .. "/bin")
		kind "ConsoleApp"
		files { "src/**.h", "src/**.c" }
		includedirs { "src" }
		libdirs { builddir .. "/lib" }
		buildoptions { "`pkg-config --cflags libpcre glib-2.0 log4c yaml-0.1 yajl json-c`" }
		linkoptions { "`pkg-config --libs libpcre glib-2.0 log4c yaml-0.1 yajl json-c`" }
		prebuildcommands {
			"mkdir -p bin lib/pkgconfig share/doc/" .. project().name,
			string.format("cp -fR %s/include %s/resources .",
				project().basedir, project().basedir) }
{{/executable}}
	if "ON" == (_OPTIONS["buildtest"] or "ON") then
		project "ts_main"
			targetdir (builddir .. "/tests")
			kind "ConsoleApp"
			files { "tests/**.h", "tests/**.c" }
			includedirs { "include" }
			libdirs { builddir .. "/lib" }
			buildoptions { "`pkg-config --cflags {{testfrwk}}{{^testfrwk}}check{{/testfrwk}}`" }
			linkoptions { "`pkg-config --libs {{testfrwk}}{{^testfrwk}}check{{/testfrwk}}`"{{#executable}}--[=[{{/executable}},
				"-l" .. solution().name:lower() }{{#executable}}]=]}{{/executable}}
			-- links { solution().name:lower() }
	end
{{#executable}}
newaction { trigger = "run", description = "Run main app",
	execute = function ()
		os.execute(string.format("cd %s ; LD_LIBRARY_PATH=%s:lib bin/%s %s",
			builddir, os.getenv("LD_LIBRARY_PATH") or "", 
			solution().name:lower(),
			#_ARGS ~= 0 and table.concat(_ARGS, " ") or ""))
	end
}

newaction { trigger = "debug", description = "Debug main app",
	execute = function ()
		local debugger = "ddd --gdb"
		os.execute(string.format("cd %s ; LD_LIBRARY_PATH=%s:lib %s bin/%s %s",
			builddir, os.getenv("LD_LIBRARY_PATH") or "", debugger, 
			solution().name:lower(), 
			#_ARGS ~= 0 and table.concat(_ARGS, " ") or ""))
	end
}

newaction { trigger = "valgrind", description = "Valgrind main app",
	execute = function ()
		local valgrind = "valgrind --verbose --tool=memcheck"
		os.execute(string.format("cd %s ; LD_LIBRARY_PATH=%s:lib %s bin/%s", 
			builddir, os.getenv("LD_LIBRARY_PATH") or "", valgrind, 
			solution().name:lower()))
	end
}
{{/executable}}
