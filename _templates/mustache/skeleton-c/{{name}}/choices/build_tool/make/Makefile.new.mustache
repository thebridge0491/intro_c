# Single package Makefile script.
.SUFFIXES: .s .o .a .h .c
help:

PKG_CONFIG = pkg-config --with-path=$(PREFIX)/lib/pkgconfig

pkg = {{project}}{{^project}}util{{/project}}
parent = {{parent}}{{^parent}}intro_c{{/parent}}
proj = $(parent)-$(pkg)
namespace_path = $(shell echo $(parent) | sed 'y|.|/|')
version = {{version}}{{^version}}0.1.0{{/version}}
somajor = $(shell echo $(version) | cut -d'.' -f1)
sominor = $(shell echo $(version) | cut -d'.' -f2)

libs_depns = libpcre glib-2.0{{#executable}} log4c yaml-0.1 yajl json-c{{/executable}}
CC = clang
CPPFLAGS := $(CPPFLAGS) -Iinclude -I../src $(shell $(PKG_CONFIG) --cflags-only-I $(libs_depns))
CFLAGS := $(CFLAGS) -Wall -pedantic -std=c99 -m64 $(shell $(PKG_CONFIG) --cflags-only-other $(libs_depns))
#ASFLAGS := $(ASFLAGS) -Iinclude $(shell $(PKG_CONFIG) --cflags-only-I $(libs_depns))
ARFLAGS = rvcs
LDFLAGS := $(LDFLAGS) -Wl,-rpath,'$$ORIGIN/:$(PREFIX)/lib' -Llib $(shell $(PKG_CONFIG) --libs-only-L $(libs_depns))
LDLIBS := $(LDLIBS) $(shell $(PKG_CONFIG) --libs-only-other --libs-only-l $(libs_depns)) # -lm # -l:libm.a

{{#executable}}
src_c = $(shell ls ../src/**/*.c)
#objs = $($(patsubst ../%,%,src_c):.c=.o)
{{/executable}}
{{^executable}}
#src_c = src/${parent}/*.s $(shell ls ../src/**/*.c)
src_c = $(shell ls ../src/**/*.c)
#objs = $($(patsubst ../%,%,src_c):.s=.o) $($(patsubst ../%.%,src_c):.c=.o)
objs = $($(patsubst ../%,%,src_c):.c=.o)
{{/executable}}

CFLAGS := $(CFLAGS) $(shell $(PKG_CONFIG) --cflags {{testfrwk}}{{^testfrwk}}check{{/testfrwk}})
#tests_c = $(patsubst ../%,../%,$(wildcard ../tests/**.c))
tests_c = $(shell ls ../tests/**.c)

.depend: $(src_c) $(tests_c)
	-@mkdir -p bin lib/pkgconfig share/doc/$(proj)
	-@cd .. ; find src tests -type d -exec mkdir -p $$OLDPWD/{} \;
	-cp -fR ../include ../resources .
	-@rm -fr lib/pkgconfig/$(proj).pc
	-sed "s|@prefix@|$(PREFIX)|" ../src/$(proj).pc.in > lib/pkgconfig/$(proj).pc
#	-@echo '' > .depend ; cd .. ; makedepend -Y -f $$OLDPWD/.depend -- $(CPPFLAGS) -- $(src_c)
	-@echo '' > .depend
	-@for f in $(src_c) $(tests_c) ; do \
	  $(CC) $(CPPFLAGS) -MM $$f >> $@ ; \
	done
#	-@$(CC) $(CPPFLAGS) -MMD -MF $$OLDPWD/.depend $(src_c) $(tests_c)

{{#executable}}
#lib/lib$(proj).$(sosuffix) : $(src_c)

bin/$(proj) : $(src_c)
	-$(LINK.c) $^ -o $@ $(LDLIBS)
{{/executable}}
{{^executable}}
lib/lib$(proj).$(sosuffix) : $(src_c)
{{/executable}}

tests/ts_main : $(tests_c)
	-$(LINK.c) $^ $(shell $(PKG_CONFIG) --libs {{testfrwk}}{{^testfrwk}}check{{/testfrwk}}){{^executable}} -l$(proj){{/executable}} -o $@

.PHONY: all testCompile{{#executable}} run debug valgrind{{/executable}}
{{#executable}}
#all: .depend lib/lib$(proj).a($(objs)) lib/lib$(proj).$(sosuffix) ## compile
all: .depend bin/$(proj) ## compile
{{/executable}}
{{^executable}}
all: .depend lib/lib$(proj).a($(objs)) lib/lib$(proj).$(sosuffix) ## compile
{{/executable}}
testCompile: tests/ts_main ## compile test
{{#executable}}

DEBUGGER = ddd --gdb	# lldb ; ddd --gdb ; gdb
# valgrind tools: memcheck helgrind cachegrind massif lackey
VALGRIND = valgrind --verbose --tool=memcheck

run: bin/$(proj) ## run main [ARGS=""]
#	export [DY]LD_LIBRARY_PATH=. # ([da|ba|z]sh Linux)
#	setenv [DY]LD_LIBRARY_PATH . # (tcsh FreeBSD)
	-LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):lib bin/$(proj) $(ARGS)
debug: bin/$(proj) ## debug main [ARGS=""]
	-LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):lib $(DEBUGGER) bin/$(proj) $(ARGS)
valgrind: bin/$(proj) ## valgrind main
	-LD_LIBRARY_PATH=$(LD_LIBRARY_PATH):lib $(VALGRIND) bin/$(proj)
{{/executable}}

#classicffi_asm_s : ../src/$(parent)/classic_asm.c.bak ../src/$(parent)/classic_f90.f90.bak
#	-$(CC) -Iinclude -Isrc -Wall -pedantic -std=c99 -m64 -S -masm=att -fPIC \
#		-x c -o src/${parent}/classic_asm.s ../src/${parent}/classic_asm.c.bak
#	-$(CC) -Iinclude -Isrc -Wall -pedantic -std=f2003 -m64 -S -masm=att -fPIC \
#		-x f95 -o src/${parent}/classic_f90.s ../src/${parent}/classic_f90.f90.bak

-include .depend ../Makefile-targets.mk
